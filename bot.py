import os
import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
from flask import Flask
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 443))

# --- –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Google ---
GOOGLE_CREDENTIALS_PATH = "/etc/secrets/GOOGLE_CREDENTIALS"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not WEBHOOK_URL:
    logger.error("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets ---
sheet = None
try:
    if not os.path.exists(GOOGLE_CREDENTIALS_PATH):
        logger.error(f"–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {GOOGLE_CREDENTIALS_PATH}")
        raise FileNotFoundError(f"–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {GOOGLE_CREDENTIALS_PATH}")

    with open(GOOGLE_CREDENTIALS_PATH, 'r') as f:
        creds_json = json.load(f)

    scope = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key("1hmm-rfUlDcA31QD04XRXIyaa_EpN8ObuHFc8cp7Rwms").sheet1
    logger.info("Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    raise

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ ---
CHANNELS = [
    "-1002657330561",
    "-1002243633174",
    "-1002484534545",
    "-1002578865225",
    "-1002617434713",
]

CHANNEL_BUTTONS = [
    {"text": "–ö–∞–Ω–∞–ª 1 ‚Äî –°–º–æ—Ç—Ä–∏ –Ω–æ–≤–∏–Ω–∫–∏", "url": "https://t.me/+8qO35jVzZVs5MjMy"},
    {"text": "–ö–∞–Ω–∞–ª 2 ‚Äî –õ—É—á—à–µ —Ñ–∏–ª—å–º—ã", "url": "https://t.me/+ZAvb9OTIrU9mOWIy"},
    {"text": "–ö–∞–Ω–∞–ª 3 ‚Äî –ü—Ä–µ–º–∏–∏ –∏ —Ö–∏—Ç—ã", "url": "https://t.me/+PAu2GRMZuUU0ZWQy"},
    {"text": "–ö–∞–Ω–∞–ª 4 ‚Äî –ö–∏–Ω–æ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã", "url": "https://t.me/+kO2CPJZgxediMmZi"},
    {"text": "–ö–∞–Ω–∞–ª 5 ‚Äî –≠–∫—Å–∫–ª—é–∑–∏–≤—ã", "url": "https://t.me/+DUDDSAYIDl8yN2Ni"},
]

@app.route('/')
def health_check():
    return "Bot is alive", 200

def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} {user.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ. üé¨\n\n"
    )
    update.message.reply_text(welcome_text)

def prompt_subscribe(update: Update, context: CallbackContext, message_id=None) -> None:
    promo_text = (
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!\n"
        "–ö–æ–≥–¥–∞ —Å–¥–µ–ª–∞–µ—à—å –≤—Å—ë, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º!"
    )
    keyboard = []
    for btn_info in CHANNEL_BUTTONS:
        keyboard.append([InlineKeyboardButton(btn_info["text"], url=btn_info["url"])])
    keyboard.append([InlineKeyboardButton("‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø!", callback_data="check_subscription")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if message_id:
        try:
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=message_id,
                text=promo_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
            update.effective_message.reply_text(promo_text, reply_markup=reply_markup)
    else:
        update.message.reply_text(promo_text, reply_markup=reply_markup)

def check_subscription(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    bot = context.bot
    all_subscribed = True

    for channel_id in CHANNELS:
        try:
            member = bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                all_subscribed = False
                break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            all_subscribed = False
            break

    if all_subscribed:
        context.user_data['subscription_confirmed'] = True
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.")
        query.message.reply_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ! üçø"
        )
        if 'pending_movie_code' in context.user_data:
            code = context.user_data.pop('pending_movie_code')
            movie = find_movie_by_code(code)
            if movie:
                query.message.reply_text(f"üé• –§–∏–ª—å–º –ø–æ –∫–æ–¥—É \"{code}\": \"{movie['title']}\"", parse_mode='Markdown')
            else:
                query.message.reply_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º —Å –∫–æ–¥–æ–º `{code}` –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∫–æ–¥.", parse_mode='Markdown')
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.")
        error_message = (
            "üòï –ü–æ—Ö–æ–∂–µ, —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑ –∏ –Ω–∞–∂–º–∏ '‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø!'.\n"
        )
        query.message.reply_text(error_message, parse_mode='Markdown')
        prompt_subscribe(update, context, message_id=query.message.message_id)

def find_movie_by_code(code: str) -> dict:
    if sheet is None:
        logger.error("Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫.")
        return None

    try:
        all_values = sheet.get_all_values()
        for row_index, row_data in enumerate(all_values):
            if not row_data or len(row_data) < 2:
                continue
            sheet_code = row_data[0].strip()
            sheet_title = row_data[1].strip()
            if sheet_code == code:
                logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º —Å –∫–æ–¥–æ–º {code}: {sheet_title}")
                return {"code": sheet_code, "title": sheet_title}
        logger.info(f"–§–∏–ª—å–º —Å –∫–æ–¥–æ–º {code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except gspread.exceptions.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API Google Sheets –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ Google Sheets: {e}")
        return None

def handle_movie_code(update: Update, context: CallbackContext) -> None:
    code = update.message.text.strip()
    user_id = update.message.from_user.id

    if not code.isdigit():
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ—á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥: {code}")
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ —Ñ–∏–ª—å–º–∞. üî¢")
        return

    if not context.user_data.get('subscription_confirmed', False):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å–∫—É. –ö–æ–¥ {code} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π.")
        context.user_data['pending_movie_code'] = code
        prompt_subscribe(update, context)
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å–∫—É. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥: {code}")
    movie = find_movie_by_code(code)
    if movie:
        update.message.reply_text(f"üé• –§–∏–ª—å–º –ø–æ –∫–æ–¥—É \"{code}\": \"{movie['title']}\"", parse_mode='Markdown')
    else:
        update.message.reply_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º —Å –∫–æ–¥–æ–º `{code}` –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∫–æ–¥.", parse_mode='Markdown')

def main() -> None:
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(check_subscription, pattern="check_subscription"))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command & Filters.regex(r'^\d+$'), handle_movie_code))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, lambda u, c: u.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ *—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π* –∫–æ–¥ —Ñ–∏–ª—å–º–∞. üî¢", parse_mode='Markdown')))

    full_webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞: {full_webhook_url}")
    logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞: {PORT}")

    try:
        updater.start_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=full_webhook_url
        )
        logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±—Ö—É–∫: {e}")
        raise

    logger.info("–ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    app.run(host='0.0.0.0', port=PORT)

if __name__ == "__main__":
    main()