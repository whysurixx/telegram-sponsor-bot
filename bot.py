import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –≤–µ–±—Ö—É–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä https://telegram-sponsor-bot.onrender.com
PORT = int(os.environ.get("PORT", 443))  # –û–±—ã—á–Ω–æ 443 –¥–ª—è HTTPS

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not WEBHOOK_URL:
    logger.error("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

CHANNELS = [
    "-1002657330561",
    "-1002243633174",
    "-1002484534545",
    "-1002578865225",
    "-1002617434713",
]

# –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL (healthcheck)
@app.route('/')
def health_check():
    return "Bot is alive", 200

def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info(f"User {user.id} started the bot")

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–µ—Ç–∞–ª–∏. üé¨\n\n"
    )
    update.message.reply_text(welcome_text)

def prompt_subscribe(update: Update, context: CallbackContext) -> None:
    promo_text = (
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!\n"
        "–ö–æ–≥–¥–∞ —Å–¥–µ–ª–∞–µ—à—å –≤—Å—ë, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º!"
    )
    keyboard = [
        [InlineKeyboardButton("–ö–∞–Ω–∞–ª 1 ‚Äî –°–º–æ—Ç—Ä–∏ –Ω–æ–≤–∏–Ω–∫–∏", url="https://t.me/+8qO35jVzZVs5MjMy")],
        [InlineKeyboardButton("–ö–∞–Ω–∞–ª 2 ‚Äî –õ—É—á—à–µ —Ñ–∏–ª—å–º—ã", url="https://t.me/+ZAvb9OTIrU9mOWIy")],
        [InlineKeyboardButton("–ö–∞–Ω–∞–ª 3 ‚Äî –ü—Ä–µ–º–∏–∏ –∏ —Ö–∏—Ç—ã", url="https://t.me/+PAu2GRMZuUU0ZWQy")],
        [InlineKeyboardButton("–ö–∞–Ω–∞–ª 4 ‚Äî –ö–∏–Ω–æ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã", url="https://t.me/+kO2CPJZgxediMmZi")],
        [InlineKeyboardButton("–ö–∞–Ω–∞–ª 5 ‚Äî –≠–∫—Å–∫–ª—é–∑–∏–≤—ã", url="https://t.me/+DUDDSAYIDl8yN2Ni")],
        [InlineKeyboardButton("–Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø!", callback_data="check_subscription")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(promo_text, reply_markup=reply_markup)

def check_subscription(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    user_id = query.from_user.id
    bot = context.bot

    all_subscribed = True
    for channel in CHANNELS:
        try:
            member = bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                all_subscribed = False
                break
        except Exception as e:
            logger.error(f"Error checking subscription for {channel}: {e}")
            all_subscribed = False
            break

        query.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑ –∏ –Ω–∞–∂–º–∏ '–Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø!'.")

def main() -> None:
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(check_subscription, pattern="check_subscription"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥) ‚Äî –≤—ã–≤–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, prompt_subscribe))

    full_webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    logger.info(f"Setting webhook to: {full_webhook_url}")
    logger.info(f"Using port: {PORT}")

    try:
        updater.start_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=full_webhook_url
        )
        logger.info("Webhook started successfully")
    except Exception as e:
        logger.error(f"Failed to start webhook: {e}")
        raise

    app.run(host='0.0.0.0', port=PORT)

if __name__ == "__main__":
    main()
