import os
import logging
import json
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
from telegram.error import RetryAfter
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8443))
GOOGLE_CREDENTIALS_PATH = "/etc/secrets/GOOGLE_CREDENTIALS"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    CHANNELS = json.loads(os.environ.get("CHANNEL_IDS", "[]"))
    CHANNEL_BUTTONS = json.loads(os.environ.get("CHANNEL_BUTTONS", "[]"))
    if not CHANNELS or not CHANNEL_BUTTONS:
        logger.error("CHANNEL_IDS –∏–ª–∏ CHANNEL_BUTTONS –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        raise ValueError("CHANNEL_IDS –∏ CHANNEL_BUTTONS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    if len(CHANNELS) != len(CHANNEL_BUTTONS):
        logger.error("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CHANNEL_IDS –∏ CHANNEL_BUTTONS –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å.")
except json.JSONDecodeError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ CHANNEL_IDS –∏–ª–∏ CHANNEL_BUTTONS: {e}")
    raise
except ValueError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
    raise

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not WEBHOOK_URL:
    logger.error("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets ---
sheet = None
try:
    if not os.path.exists(GOOGLE_CREDENTIALS_PATH):
        logger.error(f"–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {GOOGLE_CREDENTIALS_PATH}")
        raise FileNotFoundError(f"–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {GOOGLE_CREDENTIALS_PATH}")

    with open(GOOGLE_CREDENTIALS_PATH, 'r') as f:
        creds_json = json.load(f)

    scope = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key("1hmm-rfUlDcA31QD04XRXIyaa_EpN8ObuHFc8cp7Rwms").sheet1
    logger.info("Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    raise

def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} {user.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ. üé¨\n\n"
    )
    try:
        update.message.reply_text(welcome_text, parse_mode='Markdown')
    except RetryAfter as e:
        logger.warning(f"–°—Ä–∞–±–æ—Ç–∞–ª flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        time.sleep(e.retry_after)
        update.message.reply_text(welcome_text, parse_mode='Markdown')

def prompt_subscribe(update: Update, context: CallbackContext, message_id=None) -> None:
    promo_text = (
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!\n"
        "–ö–æ–≥–¥–∞ —Å–¥–µ–ª–∞–µ—à—å –≤—Å—ë, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º!"
    )
    keyboard = [[InlineKeyboardButton(btn["text"], url=btn["url"])] for btn in CHANNEL_BUTTONS]
    keyboard.append([InlineKeyboardButton("‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø!", callback_data="check_subscription")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if message_id:
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=message_id,
                text=promo_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            update.message.reply_text(promo_text, reply_markup=reply_markup, parse_mode='Markdown')
    except RetryAfter as e:
        logger.warning(f"–°—Ä–∞–±–æ—Ç–∞–ª flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        time.sleep(e.retry_after)
        if message_id:
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=message_id,
                text=promo_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            update.message.reply_text(promo_text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

def check_subscription(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    bot = context.bot
    all_subscribed = True
    failed_channel = None

    # Prevent duplicate processing
    query_id = query.id
    if context.user_data.get('last_processed_query') == query_id:
        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å {query_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return
    context.user_data['last_processed_query'] = query_id

    # Limit subscription attempts
    context.user_data['subscription_attempts'] = context.user_data.get('subscription_attempts', 0) + 1
    if context.user_data['subscription_attempts'] > 3:
        try:
            query.message.edit_text(
                "üòî –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}.")
        return

    for channel_id in CHANNELS:
        try:
            member = bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                all_subscribed = False
                failed_channel = channel_id
                break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            all_subscribed = False
            failed_channel = channel_id
            break

    if all_subscribed:
        context.user_data['subscription_confirmed'] = True
        context.user_data['subscription_attempts'] = 0
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.")
        try:
            query.message.edit_text(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.\n"
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ! üçø",
                parse_mode='Markdown'
            )
            # Process pending movie code
            if 'pending_movie_code' in context.user_data:
                code = context.user_data.pop('pending_movie_code')
                movie = find_movie_by_code(code)
                try:
                    if movie:
                        query.message.reply_text(f"üé• –§–∏–ª—å–º –ø–æ –∫–æ–¥—É {code}: {movie['title']}", parse_mode='Markdown')
                    else:
                        query.message.reply_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º —Å –∫–æ–¥–æ–º `{code}` –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∫–æ–¥.", parse_mode='Markdown')
                except RetryAfter as e:
                    logger.warning(f"–°—Ä–∞–±–æ—Ç–∞–ª flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
                    time.sleep(e.retry_after)
                    if movie:
                        query.message.reply_text(f"üé• –§–∏–ª—å–º –ø–æ –∫–æ–¥—É {code}: {movie['title']}", parse_mode='Markdown')
                    else:
                        query.message.reply_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º —Å –∫–æ–¥–æ–º `{code}` –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∫–æ–¥.", parse_mode='Markdown')
        except RetryAfter as e:
            logger.warning(f"–°—Ä–∞–±–æ—Ç–∞–ª flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
            time.sleep(e.retry_after)
            query.message.edit_text(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.\n"
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ! üçø",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}.")
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: {failed_channel}")
        try:
            query.message.edit_text(
                f"üòï –ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {failed_channel or '–æ–¥–∏–Ω –∏–∑ –∫–∞–Ω–∞–ª–æ–≤'}.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑ –∏ –Ω–∞–∂–º–∏ '‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø!'.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(btn["text"], url=btn["url"]) for btn in CHANNEL_BUTTONS],
                    [InlineKeyboardButton("‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø!", callback_data="check_subscription")]
                ])
            )
        except RetryAfter as e:
            logger.warning(f"–°—Ä–∞–±–æ—Ç–∞–ª flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
            time.sleep(e.retry_after)
            query.message.edit_text(
                f"üòï –ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {failed_channel or '–æ–¥–∏–Ω –∏–∑ –∫–∞–Ω–∞–ª–æ–≤'}.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑ –∏ –Ω–∞–∂–º–∏ '‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø!'.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(btn["text"], url=btn["url"]) for btn in CHANNEL_BUTTONS],
                    [InlineKeyboardButton("‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø!", callback_data="check_subscription")]
                ])
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

def find_movie_by_code(code: str) -> dict:
    if sheet is None:
        logger.error("Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫.")
        return None

    try:
        all_values = sheet.get_all_values()
        for row_index, row_data in enumerate(all_values):
            if not row_data or len(row_data) < 2:
                continue
            sheet_code = row_data[0].strip()
            sheet_title = row_data[1].strip()
            if sheet_code == code:
                logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º —Å –∫–æ–¥–æ–º {code}: {sheet_title}")
                return {"code": sheet_code, "title": sheet_title}
        logger.info(f"–§–∏–ª—å–º —Å –∫–æ–¥–æ–º {code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except gspread.exceptions.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API Google Sheets –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ Google Sheets: {e}")
        return None

def handle_movie_code(update: Update, context: CallbackContext) -> None:
    code = update.message.text.strip()
    user_id = update.message.from_user.id

    if not code.isdigit():
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ—á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥: {code}")
        try:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ —Ñ–∏–ª—å–º–∞. üî¢", parse_mode='Markdown')
        except RetryAfter as e:
            logger.warning(f"–°—Ä–∞–±–æ—Ç–∞–ª flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
            time.sleep(e.retry_after)
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ —Ñ–∏–ª—å–º–∞. üî¢", parse_mode='Markdown')
        return

    if not context.user_data.get('subscription_confirmed', False):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å–∫—É. –ö–æ–¥ {code} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π.")
        context.user_data['pending_movie_code'] = code
        prompt_subscribe(update, context)
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å–∫—É. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥: {code}")
    movie = find_movie_by_code(code)
    if movie:
        try:
            update.message.reply_text(f"üé• –§–∏–ª—å–º –ø–æ –∫–æ–¥—É {code}: {movie['title']}", parse_mode='Markdown')
        except RetryAfter as e:
            logger.warning(f"–°—Ä–∞–±–æ—Ç–∞–ª flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
            time.sleep(e.retry_after)
            update.message.reply_text(f"üé• –§–∏–ª—å–º –ø–æ –∫–æ–¥—É {code}: {movie['title']}", parse_mode='Markdown')
    else:
        try:
            update.message.reply_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º —Å –∫–æ–¥–æ–º `{code}` –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∫–æ–¥.", parse_mode='Markdown')
        except RetryAfter as e:
            logger.warning(f"–°—Ä–∞–±–æ—Ç–∞–ª flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
            time.sleep(e.retry_after)
            update.message.reply_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º —Å –∫–æ–¥–æ–º `{code}` –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∫–æ–¥.", parse_mode='Markdown')

def handle_non_numeric_text(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id == context.bot.id:
        return  # Ignore messages sent by the bot itself
    try:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ *—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π* –∫–æ–¥ —Ñ–∏–ª—å–º–∞. üî¢", parse_mode='Markdown')
    except RetryAfter as e:
        logger.warning(f"–°—Ä–∞–±–æ—Ç–∞–ª flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        time.sleep(e.retry_after)
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ *—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π* –∫–æ–¥ —Ñ–∏–ª—å–º–∞. üî¢", parse_mode='Markdown')

def main() -> None:
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(check_subscription, pattern="check_subscription"))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command & Filters.regex(r'^\d+$'), handle_movie_code))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command & ~Filters.regex(r'^\d+$'), handle_non_numeric_text))

    full_webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞: {full_webhook_url}")
    logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞: {PORT}")

    try:
        updater.start_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=full_webhook_url
        )
        logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        updater.idle()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±—Ö—É–∫: {e}")
        raise

if __name__ == "__main__":
    main()